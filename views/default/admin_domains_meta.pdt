        <?php
        echo (isset($message) ? $message : null);

        $this->Widget->clear();
        $this->Widget->setStyleSheet($this->view_dir . 'css/styles.css', ['id' => 'domains_styles']);
        $this->Widget->create($this->_('AdminDomains.meta.boxtitle_meta_tld', true, $tld->tld), ['id' => 'meta_tld' . str_replace('.', '_', $tld->tld)], (isset($render_section) ? $render_section : null));

        $this->Form->create(null, ['id' => 'meta_tld']);
        ?>

        <div class="inner">
            <div class="modal_page" id="page_warning">
                <div class="p-3">
                    <h1><i class="fab fa-whmcs fa-fw"></i> <?php $this->_('AdminDomains.meta.heading_update_required');?></h1>
                    <p class="text-black-50"><?php $this->_('AdminDomains.meta.text_update_required_note');?></p>
                </div>

                <div class="button_row">
                    <a href="#" id="continue" class="btn btn-success float-right"><i class="fas fa-arrow-right"></i> <?php $this->_('AdminDomains.meta.field_continue');?></a>
                </div>
            </div>

            <div class="modal_page" id="page_meta" style="display: none;">
                <?php
                if (!empty($package_fields['fields'])) {
                ?>
                <div class="title_row first"><h3><?php $this->_('AdminDomains.meta.heading_module_options');?></h3></div>
                <div class="pad">
                    <?php
                    // Set any hidden fields
                    foreach ((isset($package_fields['fields']) ? $package_fields['fields'] : []) as $index => $field) {
                        foreach ($field->fields as $input) {
                            if ($input->type == 'fieldHidden') {
                                call_user_func_array([$this->Form, $input->type], $input->params);
                                unset($package_fields['fields'][$index]);
                                continue 2;
                            }
                        }
                    }
                    ?>

                    <ul>
                        <li>
                            <?php
                            $this->Form->label($package_fields['group_name'], 'module_group');
                            $this->Form->fieldSelect('module_group', ['select' => $this->_('AppController.select.please', true)] + ['' => $this->_('AdminDomains.meta.field_modulegroup_any', true)] + (isset($package_fields['groups']) ? $package_fields['groups'] : []), (isset($package->module_group) ? $package->module_group : ''), ['id' => 'module_group']);
                            ?>
                        </li>

                        <?php
                        if (!empty($package_fields['rows'])) {
                            ?>
                            <li class="module_row_field">
                                <?php
                                $this->Form->label($package_fields['row_name'], 'module_row');
                                $this->Form->fieldSelect('module_row', $package_fields['rows'], (isset($package->module_row) ? $package->module_row : 0), ['id' => 'module_row']);
                                ?>
                            </li>
                            <?php
                        } else {
                            $this->Form->fieldHidden('module_row', (isset($package->module_row) ? $package->module_row : 0), ['id' => 'module_row']);
                        }
                        ?>

                        <?php
                        foreach ($package_fields['fields'] as $field) {
                        ?>
                        <li>
                            <?php
                            // Determine all field tooltips
                            $tooltips = [];
                            foreach ($field->fields as $input) {
                                // Collect all tooltips to be displayed for the field
                                if ($input->type == 'tooltip') {
                                    $tooltips[] = $input;
                                }
                            }

                            // Draw the primary label/field
                            call_user_func_array(
                                [$this->Form, $field->type],
                                array_merge_recursive((array)$field->params, (!empty($tooltips) ? ['attributes' => ['class' => 'inline']] : []))
                            );

                            // Draw each form field associated with this label
                            foreach ($field->fields as $input) {
                                // Collect all tooltips to be displayed at the end
                                if ($input->type == 'tooltip') {
                                    continue;
                                }

                                // Display a tooltip after the label if there is a label or the field is not a checkbox/radio
                                $params = [];
                                if (!empty($tooltips) && (!empty($field->params['name']) || !in_array($input->type, ['fieldCheckbox', 'fieldRadio']))) {
                                    $params = (!in_array($input->type, ['fieldCheckbox', 'fieldRadio']) ? ['attributes' => ['class' => 'block']] : []);

                                    foreach ($tooltips as $tooltip) {
                                    ?>
                                    <span class="tooltip block">
                                        <?php $this->_('AppController.tooltip.text');?>
                                        <div><?php echo isset($tooltip->params['message']) ? $this->Html->safe($tooltip->params['message']) : null;?></div>
                                    </span>
                                    <?php
                                    }

                                    // Radio/checkbox lists should break at a new line
                                    if (in_array($input->type, ['fieldCheckbox', 'fieldRadio'])) {
                                    ?>
                                    <br />
                                    <?php
                                    }

                                    // Reset tooltips, they've already been displayed
                                    $tooltips = [];
                                }

                                // Display the form input field
                                call_user_func_array(
                                    [$this->Form, $input->type],
                                    array_merge_recursive((array)$input->params, $params)
                                );

                                // Draw the form field's secondary label if checkbox or radio item
                                if (($input->type == 'fieldCheckbox' || $input->type == 'fieldRadio') && isset($input->label)) {
                                    if (isset($input->label->params['attributes']['class'])) {
                                        if (is_array($input->label->params['attributes']['class'])) {
                                            $input->label->params['attributes']['class'][] = 'inline';
                                        } else {
                                            $input->label->params['attributes']['class'] .= ' inline';
                                        }
                                    } else {
                                        $input->label->params['attributes']['class'] = 'inline';
                                    }

                                    call_user_func_array([$this->Form, 'label'], $input->label->params);
                                }
                            }

                            // Display tooltips at the end of the field if any exist
                            foreach ($tooltips as $tooltip) {
                            ?>
                            <span class="tooltip">
                                <?php $this->_('AppController.tooltip.text');?>
                                <div><?php echo isset($tooltip->params['message']) ? $this->Html->safe($tooltip->params['message']) : null;?></div>
                            </span>
                            <?php
                            }
                            ?>
                        </li>
                        <?php
                        }
                        ?>
                    </ul>
                </div>

                <div class="button_row">
                    <?php
                    $this->Form->fieldSubmit('save', $this->_('AdminDomains.meta.field_update', true), ['class' => 'btn btn-primary float-right']);
                    ?>
                    <a href="#" id="finish" class="btn btn-success close float-right" style="display: none;"><i class="fas fa-check"></i> <?php $this->_('AdminDomains.meta.field_finish');?></a>
                </div>
                <?php
                } else {
                ?>
                <div class="text-center p-4">
                    <div class="text-black-50"><i class="far fa-smile"></i></div>
                    <h1 class="text-black-50 mt-3"><?php $this->_('AdminDomains.meta.heading_update_no_required');?></h1>
                    <p class="text-black-50 pb-0 mb-0"><?php $this->_('AdminDomains.meta.text_update_no_required_note');?></p>
                </div>
                <div class="button_row">
                    <a href="#" class="btn btn-success close float-right"><i class="fas fa-check"></i> <?php $this->_('AdminDomains.meta.field_finish');?></a>
                </div>
                <?php
                }
                ?>
            </div>
        </div>
        <?php
        $this->Form->end();
        $this->Widget->end();
        ?>

<script type="text/javascript">
    $(document).ready(function() {
        // Set pages
        $('#meta_tld #continue').on('click', function() {
            $('#meta_tld #page_warning').hide(100);
            $('#meta_tld #page_meta').show(200);
        });

        // Close modal
        $('#meta_tld .btn.close, #qtip-overlay').on('click', function() {
            $(this).closest('.qtip').find('.qtip-close').click();
            location.reload();
        });

        // Update package meta
        $('form').on('submit', function(event) {
            event.preventDefault();

            $(this).blestaRequest(
                "POST",
                $('#meta_tld').attr('action'),
                $('#meta_tld').serialize("serialize"),
                function(response) {
                    // Show messages
                    if (response.hasOwnProperty('message')) {
                        var parent = $('#meta_tld');

                        parent.find('.error_section').remove();
                        parent.prepend(response.message);
                    }

                    if (!response.message.includes('error_box error')) {
                        $('#meta_tld #page_meta input[name="save"]').hide();
                        $('#meta_tld #page_meta #finish').show();
                    }
                },
                null,
                {dataType: 'json'}
            );
        });
    });
</script>
